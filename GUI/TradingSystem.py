import sys
from datetime import datetime, time

from PyQt6 import QtWidgets, uic
from PyQt6.QtCore import QTimer
from PyQt6.QtWidgets import QTextBrowser, QPushButton, QLineEdit
from pykrx import stock

from Íµ≠ÎÇ¥Ï£ºÏãù.Ï£ºÏãùÍ∏∞Î≥∏Ï†ïÎ≥¥ÏöîÏ≤≠ import fn_ka10001


class MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        uic.loadUi("gui.ui", self)

        # UIÏóêÏÑú ÏöîÏÜå Ï∞æÏùÄ ÌõÑ Î≥ÄÏàòÏóê Ï†ÄÏû•
        self.textboard = self.findChild(QTextBrowser, 'textboard')
        self.buysell_log = self.findChild(QTextBrowser, 'buysell_log')
        self.button_start = self.findChild(QPushButton, 'button_start')
        self.button_stop = self.findChild(QPushButton, 'button_stop')
        self.code_list = self.findChild(QLineEdit, 'code_list')
        self.k_value = self.findChild(QLineEdit, 'k_value')

        # Î≥¥Ïú† Ï¢ÖÎ™© Ï†ÄÏû•
        self.bought = set()

        # ÌÉÄÏù¥Î®∏ ÏÑ§Ï†ï
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.trading)

        # Î≤ÑÌäº Ïù¥Î≤§Ìä∏ Ïó∞Í≤∞
        self.button_start.clicked.connect(self.start)
        self.button_stop.clicked.connect(self.stop)

    def start(self):
        self.textboard.append("üì° Î≥ÄÎèôÏÑ± ÎèåÌåå Ï†ÑÎûµ ÏãúÏûë...")
        self.timer.start(3000)

    def stop(self):
        self.timer.stop()
        self.textboard.append("‚õî Ï†ÑÎûµ Ï§ëÎã®Îê®.")
        self.bought.clear()

    def trading(self):
        now = datetime.now()
        current_time = now.strftime("[%H:%M:%S]")

        # 1. KÍ∞í
        try:
            k = float(self.k_value.text())
        except ValueError:
            self.textboard.append("‚ö†Ô∏è K Í∞íÏùÑ Ïò¨Î∞îÎ•¥Í≤å ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.")
            return

        codes = [c.strip() for c in self.code_list.text().split(",") if c.strip()]
        today = now.strftime("%Y%m%d")
        prev_day = stock.get_nearest_business_day_in_a_week(today, prev=True)

        for code in codes:
            try:
                # 2. Ï†ÑÏùº Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
                df = stock.get_market_ohlcv_by_date(prev_day, prev_day, code)
                if df.empty:
                    continue

                prev_high = df.iloc[0]['Í≥†Í∞Ä']
                prev_low = df.iloc[0]['Ï†ÄÍ∞Ä']
                prev_close = df.iloc[0]['Ï¢ÖÍ∞Ä']
                target = prev_close + (prev_high - prev_low) * k

                # 3. ÌòÑÏû¨Í∞Ä Ï°∞Ìöå
                name, current_price = fn_ka10001(code)
                current_price = float(str(current_price).replace(",", "").strip())

                self.textboard.append(
                    f"{current_time} [{code}] [{name}] ÌòÑÏû¨Í∞Ä: {current_price} / Î™©ÌëúÍ∞Ä: {round(target, 2)}"
                )

                # 4. Îß§Ïàò Ï°∞Í±¥
                if current_price > target and code not in self.bought and now.time() < time(15, 0):
                    self.buy_stock(code, name, current_price)

                # 5. 15Ïãú Ïù¥ÌõÑ Îß§ÎèÑ Ï°∞Í±¥
                if code in self.bought and now.time() >= time(15, 0):
                    self.sell_stock(code, name, current_price)

            except Exception as e:
                self.textboard.append(f"‚ö†Ô∏è [{code}] Ïò§Î•ò Î∞úÏÉù: {e}")

    def buy_stock(self, code: str, name: str, price: float):
        self.bought.add(code)
        self.buysell_log.append(f"[Îß§Ïàò] [{code}] [{name}] [{price}] [1]")

    def sell_stock(self, code: str, name: str, price: float):
        self.bought.remove(code)
        self.buysell_log.append(f"[Îß§ÎèÑ] [{code}] [{name}] [{price}] [1]")

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())
